#!/usr/bin/env bash
# --                         -- #
# --   ONESETUP EXECUTABLE   -- #
# --                         -- #

# -- Helper Script -- #
function helper() {
  source "$ONESETUP_DIR/scripts/helper.sh" || { echo -e "${I_ERR}Failed to load Helper Script. Please ensure your installation was correct." && exit 1; }
}

# -- Main Function -- #
function main() {
  # Environment Variables (only set if unset)
  if [[ -z "${ONESETUP_DIR:-}" ]]; then
    export ONESETUP_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/onesetup"
  fi
  if [[ -z "${ONESETUP_REPO:-}" ]]; then
    export ONESETUP_REPO="onexbash/onesetup"
  fi
  if [[ -z "${DOTFILES_DIR:-}" ]]; then
    export DOTFILES_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/dotfiles"
  fi
  if [[ -z "${DOTFILES_REPO:-}" ]]; then
    export DOTFILES_REPO="onexbash/dotfiles"
  fi
  if [[ -z "${ANSIBLE_DEBUG:-}" ]]; then
    export ANSIBLE_DEBUG=0
  fi

  # Variables
  SCRIPT_NAME=$(basename "$0")
  ONESETUP_REPO_HTTPS="https://github.com/${ONESETUP_REPO}.git"
  ONESETUP_REPO_RAW="https://raw.githubusercontent.com/${ONESETUP_REPO}/main"
  DOTFILES_REPO_RAW="https://raw.githubusercontent.com/${DOTFILES_REPO}/main"
  DOTFILES_REPO_HTTPS="https://github.com/${DOTFILES_REPO}.git"

  # Call Helper Function
  helper
  # Subcommand Handler
  case "${1:-}" in
  # CMD: `onesetup encrypt [COMMAND] [ARGS]`
  encrypt)
    shift
    encrypt "$@"
    ;;
  # CMD: `onesetup run [COMMAND] [OPTIONS]`
  run)
    shift
    run "$@"
    ;;
  # CMD: `onesetup --help`
  help | --help | -h)
    help_general
    ;;
  # CMD: Invalid Command Usage
  *)
    echo -e "${I_ERR}Unknown Command: '$1'"
    echo -e "${I_INFO}Run '$SCRIPT_NAME --help' for usage information"
    exit 1
    ;;
  esac
}

# -- Help Pages -- #
# CMD: `onesetup [COMMAND] --help`

# Help Page: General
function help_general() {
  cat <<EOF
----
A utility for managing one-time setups with encryption.

Usage: $SCRIPT_NAME [COMMAND] [OPTIONS]
Help: $SCRIPT_NAME [COMMAND] --help

Commands:
  controller Execute Logic on the Ansible Control-Node
  encrypt    Encrypt files or directories
  help       Show this help message
----
EOF
}

# Help Page: Encrypt
function help_encrypt() {
  cat <<EOF
----
This subcommand can be used to encrypt files/strings via Ansible Vault.

Usage: $SCRIPT_NAME encrypt [OPTIONS] [ARGS]

Options:
  --string [ARGS: <filepath>]
  --file [ARGS: <string>]
Examples:
$SCRIPT_NAME encrypt --string "plaintext-password"
$SCRIPT_NAME encrypt --file ~/.config/ssh/id_ed25519.pub
$SCRIPT_NAME encrypt --string
$SCRIPT_NAME encrypt --file
----
EOF
}
function help_run() {
  cat <<EOF
----
This subcommand can be used to apply your Playbook Configuration on the Remote Targets.
Usage: $SCRIPT_NAME run
----
EOF
}

# -- Encrypt -- #
# CMD: `onesetup encrypt [OPTIONS] [ARGS]`
function encrypt() {
  # Encrypt String
  function encrypt_string() {
    printf "%b" "${I_ASK}Secret to Encrypt: "
    read -r secret
    printf "%b" "${I_ASK}Variable Name: "
    read -r varname
    ansible-vault encrypt_string \
      --show-input \
      --vault-id "onesetup@prompt" \
      --encrypt-vault-id "onesetup" \
      --name "$varname" \
      "$secret" | pbcopy
    echo -e "${I_OK}Encrypted string copied to clipboard."
  }

  # Encrypt File
  function encrypt_file() {
    local filepath="$1"
    local var_name="$2"
    # Check if file exists
    if [[ ! -f "$filepath" ]]; then
      echo -e "${I_ERR}File not found: $filepath"
      return 1
    fi
    # Read file content
    local filecontent
    filecontent=$(<"$filepath")
    # Encrypt and copy to clipboard
    ansible-vault encrypt_string \
      --show-input \
      --vault-id "onesetup@prompt" \
      --encrypt-vault-id "onesetup" \
      --name "$var_name" \
      "$filecontent" | pbcopy
    echo -e "${I_OK}Encrypted Content of [ ${FG_MAGENTA}$filepath${S_RESET} ] copied to clipboard with Ansible Variable [ ${FG_MAGENTA}$var_name${S_RESET} ]"
  }

  # Handle [OPTIONS] of encrypt command
  case "${1:-}" in
  --string | -s)
    shift
    encrypt_string "$@"
    ;;
  --file | -f)
    shift
    encrypt_file "$@"
    ;;
  --help | -h)
    encrypt_help
    ;;
  *)
    echo -e "${I_ERR}Wrong command usage. See: 'onesetup encrypt --help'"
    ;;
  esac
}

# -- RUN -- #
# CMD: `onesetup run`
function run() {
  # Specify container engine to use
  export CONTAINER_CONNECTION="onesetup"

  # Check if a podman machine with name "onesetup" exists
  if podman machine list --format "{{.Name}}" | grep -q "^onesetup$"; then
    echo -e "${I_OK}Podman Machine [onesetup] exists!"
  else
    { podman machine init "onesetup" \
      --cpus 4 \
      --memory 4096 \
      --disk-size 10 \
      --rootful=false \
      --now &&
      echo -e "${I_OK}Podman Machine [onesetup] has been created & started!"; } || echo -e "${I_ERR}Failed to create Podman Machine [onesetup]"
  fi

  # Check if the container engine is running
  if podman machine inspect "onesetup" 2>/dev/null | jq -e '.[0].State == "running"' >/dev/null; then
    echo -e "${I_OK}Podman Machine [onesetup] is running!"
  else
    podman machine start "onesetup" || echo -e "${I_ERR}Failed to start Podman Machine [onesetup]"
  fi

  # Build Control-Node Container
  podman-compose \
    -f "$ONESETUP_DIR/docker-compose.yml" build \
    --build-arg "ONESETUP_DIR=$ONESETUP_DIR" \
    --build-arg "DOTFILES_DIR=$DOTFILES_DIR" \
    --build-arg "ONESETUP_REPO=$ONESETUP_REPO" \
    --build-arg "DOTFILES_REPO=$DOTFILES_REPO" \
    "onesetup" &&
    echo -e "${I_OK}Control-Node image built successfully!" ||
    echo -e "${I_ERR}Control-Node Container Image failed to build!"
  # Run Control-Node Container
  podman-compose \
    -f "$ONESETUP_DIR/docker-compose.yml" run \
    "onesetup" &&
    echo -e "${I_OK}Control-Node Container successfully running!" ||
    echo -e "${I_ERR}Control-Node Container failed to run!"
}

# Call Main Function with args
main "$@"
