#!/usr/bin/env bash
# --                         -- #
# --   ONESETUP EXECUTABLE   -- #
# --                         -- #

# -- Helper Functions -- #
function helper() {
  # Load Helper Script
  source "$ONESETUP_DIR/scripts/helper.sh" && echo -e "${I_OK}Helper Script Loaded." || echo -e "${I_ERR}Failed to load Helper Script. Please ensure your installation was correct." && exit 1
  # Load .env File
  # load_env_file "$ONESETUP_DIR/.env.public"
  set -a
  source "$ONESETUP_DIR/.env.public" && echo -e "${I_OK}Environment Variables Loaded from '.env.public'." || echo -e "${I_WARN}Failed to load Environment Variables from $ONESETUP_DIR/.env.public'."
  set +a
}

# -- Main Function -- #
function main() {
  # Environment Variables
  export ONESETUP_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/onesetup"
  export ONESETUP_REPO="onexbash/onesetup"
  export DOTFILES_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/dotfiles"
  export DOTFILES_REPO="onexbash/dotfiles"
  # Variables
  VERSION="1.0.0"
  SCRIPT_NAME=$(basename "$0")
  ONESETUP_REPO_HTTPS="https://github.com/${ONESETUP_REPO}.git"
  ONESETUP_REPO_RAW="https://raw.githubusercontent.com/${ONESETUP_REPO}/main"
  DOTFILES_REPO_RAW="https://raw.githubusercontent.com/${DOTFILES_REPO}/main"
  DOTFILES_REPO_HTTPS="https://github.com/${DOTFILES_REPO}.git"
  # Call Helper Function
  helper
  # Subcommand Handler
  echo "test"
  echo "$@"
  echo "$1"
  case "${1:-}" in
  # CMD: `onesetup encrypt [COMMAND] [ARGS]`
  encrypt)
    shift
    encrypt "$@"
    ;;
  # CMD: `onesetup controller [COMMAND] [OPTIONS]`
  controller)
    shift
    controller "$@"
    ;;
  # CMD: `onesetup --help`
  help | --help | -h)
    help_pages
    ;;
  # CMD: `onesetup --version`
  version | --version | -v)
    version
    ;;
  # CMD: Invalid Command Usage
  *)
    echo -e "${I_ERR}Unknown Command: '$1'"
    echo -e "${I_INFO}Run '$SCRIPT_NAME --help' for usage information"
    exit 1
    ;;
  esac
}

# -- Help Pages -- #
# CMD: `onesetup [COMMAND] --help`

# Help Page: General
function help_main() {
  cat <<EOF
----
A utility for managing one-time setups with encryption.

Usage: $SCRIPT_NAME [COMMAND] [OPTIONS]
Help: $SCRIPT_NAME [COMMAND] --help

Commands:
  controller Execute Logic on the Ansible Control-Node
  encrypt    Encrypt files or directories
  help       Show this help message
  version    Show version information
----
EOF
}

# Help Page: Encrypt
function help_encrypt() {
  cat <<EOF
----
This subcommand can be used to encrypt files/strings via Ansible Vault.

Usage: $SCRIPT_NAME encrypt [OPTIONS] [ARGS]

Options:
  --string [ARGS: <filepath>]
  --file [ARGS: <string>]
Examples:
$SCRIPT_NAME encrypt --string "plaintext-password"
$SCRIPT_NAME encrypt --file ~/.config/ssh/id_ed25519.pub
$SCRIPT_NAME encrypt --string
$SCRIPT_NAME encrypt --file
----
EOF
}

# -- Version Info -- #
# CMD: `onesetup version`
function version() {
  echo -e "${I_INFO}$SCRIPT_NAME version $VERSION"
}

# -- Encrypt -- #
# CMD: `onesetup encrypt [OPTIONS] [ARGS]`
function encrypt() {
  # Encrypt String
  function encrypt_string() {
    printf "%b" "${I_ASK}Secret to Encrypt: "
    read -r secret
    printf "%b" "${I_ASK}Variable Name: "
    read -r varname
    ansible-vault encrypt_string \
      --show-input \
      --vault-id "$vault_id@prompt" \
      --encrypt-vault-id "$vault_id" \
      --name "$varname" \
      "$secret" | pbcopy
    echo -e "${I_OK}Encrypted string copied to clipboard."
  }
  # Encrypt File
  function encrypt_file() {
    local filepath="$1"
    local var_name="$2"
    # Check if file exists
    if [[ ! -f "$filepath" ]]; then
      echo -e "${I_ERR}File not found: $filepath"
      return 1
    fi
    # Read file content
    local filecontent=$(<"$filepath")
    # Encrypt and copy to clipboard
    ansible-vault encrypt_string \
      --show-input \
      --vault-id "$vault_id@prompt" \
      --encrypt-vault-id "$vault_id" \
      --name "$var_name" \
      "$filecontent" | pbcopy
    echo -e "${I_OK}Encrypted Content of [ ${FG_MAGENTA}$filepath${S_RESET} ] copied to clipboard with Ansible Variable [ ${FG_MAGENTA}$var_name${S_RESET} ]"
  }
  # Handle [OPTIONS] of encrypt command
  case "${1:-}" in
  --string | -s)
    shift
    encrypt_string "$@"
    ;;
  --file | -f)
    shift
    encrypt_file "$@"
    ;;
  --help | -h)
    encrypt_help
    ;;
  *)
    echo -e "${I_ERR}Wrong command usage. See: 'onesetup encrypt --help'"
    ;;
  esac
}

# -- CONTROL NODE -- #
# CMD: `onesetup controller [COMMAND]`

function controller() {
  # Install Modules from Ansible Galaxy
  if [ -f "requirements.yml" ]; then
    ansible-galaxy role install -r "requirements.yml"
  else
    echo "WARN: requirements.yml not found. Nothing will be installed from Ansible Galaxy."
  fi
  # Run the Ansible playbook once initially
  if [ -f "main.yml" ]; then
    ansible-playbook --ask-vault-password "main.yml"
  else
    echo "ERROR: main.yml not found. Skipping initial playbook run."
  fi
  exec /bin/bash
}

# Call Main Function with args
main "$@"
